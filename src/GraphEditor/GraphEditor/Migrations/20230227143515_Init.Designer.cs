// <auto-generated />
using GraphEditor.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GraphEditor.Migrations
{
    [DbContext(typeof(GraphDBContext))]
    [Migration("20230227143515_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GraphEditor.Models.Auth.User.UserRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRecord");
                });

            modelBuilder.Entity("GraphEditor.Models.Graph.GraphLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GraphRecordId")
                        .HasColumnType("text");

                    b.Property<string>("SourceId")
                        .HasColumnType("text");

                    b.Property<string>("TargetId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GraphRecordId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TargetId");

                    b.ToTable("GraphLink");
                });

            modelBuilder.Entity("GraphEditor.Models.Graph.GraphNode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GraphRecordId")
                        .HasColumnType("text");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("GraphRecordId");

                    b.ToTable("GraphNode");
                });

            modelBuilder.Entity("GraphEditor.Models.Graph.GraphRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GraphRecord");
                });

            modelBuilder.Entity("GraphRecordUserRecord", b =>
                {
                    b.Property<string>("CanEditId")
                        .HasColumnType("text");

                    b.Property<string>("CanEditId1")
                        .HasColumnType("text");

                    b.HasKey("CanEditId", "CanEditId1");

                    b.HasIndex("CanEditId1");

                    b.ToTable("GraphRecordUserRecord");
                });

            modelBuilder.Entity("GraphEditor.Models.Graph.GraphLink", b =>
                {
                    b.HasOne("GraphEditor.Models.Graph.GraphRecord", null)
                        .WithMany("Links")
                        .HasForeignKey("GraphRecordId");

                    b.HasOne("GraphEditor.Models.Graph.GraphNode", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("GraphEditor.Models.Graph.GraphNode", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("GraphEditor.Models.Graph.GraphNode", b =>
                {
                    b.HasOne("GraphEditor.Models.Graph.GraphRecord", null)
                        .WithMany("Nodes")
                        .HasForeignKey("GraphRecordId");

                    b.OwnsOne("GraphEditor.Models.Graph.GraphNodeMeta", "Meta", b1 =>
                        {
                            b1.Property<string>("GraphNodeId")
                                .HasColumnType("text");

                            b1.Property<string>("Color")
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .HasColumnType("text");

                            b1.HasKey("GraphNodeId");

                            b1.ToTable("GraphNode");

                            b1.WithOwner()
                                .HasForeignKey("GraphNodeId");
                        });

                    b.Navigation("Meta")
                        .IsRequired();
                });

            modelBuilder.Entity("GraphRecordUserRecord", b =>
                {
                    b.HasOne("GraphEditor.Models.Graph.GraphRecord", null)
                        .WithMany()
                        .HasForeignKey("CanEditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphEditor.Models.Auth.User.UserRecord", null)
                        .WithMany()
                        .HasForeignKey("CanEditId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GraphEditor.Models.Graph.GraphRecord", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Nodes");
                });
#pragma warning restore 612, 618
        }
    }
}
